name: CI

on:
  push:
    branches: [ main, CI ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  # Use separate database names for different jobs to avoid conflicts
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: degen_test
  DATABASE_URL: postgres://postgres:postgres@localhost:5432/degen_test

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: degen_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, clippy
      
      - name: Show rustfmt version
        run: rustfmt --version
      
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Wait for PostgreSQL
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -U $POSTGRES_USER; then
              echo "PostgreSQL is ready"
              exit 0
            fi
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "Failed to connect to PostgreSQL"
          exit 1
      
      - name: Set up test database
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: |
          # Create a fresh test database for this run
          psql -h localhost -U $POSTGRES_USER -c "DROP DATABASE IF EXISTS $POSTGRES_DB;"
          psql -h localhost -U $POSTGRES_USER -c "CREATE DATABASE $POSTGRES_DB;"
          
          # Create the test database URL
          echo "TEST_DATABASE_URL=postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@localhost:5432/$POSTGRES_DB" >> $GITHUB_ENV
      
      - name: Install SQLx CLI
        run: |
          if ! command -v sqlx &> /dev/null; then
            cargo install sqlx-cli --no-default-features --features native-tls,postgres
          fi

      - name: Run database migrations
        run: |
          # Run migrations with retries
          for i in {1..3}; do
            if sqlx migrate run; then
              echo "Migrations applied successfully"
              break
            else
              echo "Migration attempt $i failed, retrying..."
              sleep 2
            fi
          done
      
      - name: Check code formatting
        run: |
          # Check formatting with cargo fmt
          echo "Checking code formatting with rustfmt..."
          if ! cargo fmt -- --check; then
            echo "::error::Code formatting issues found. Run 'cargo fmt' to fix them."
            exit 1
          fi
      
      - name: Run clippy
        run: cargo clippy -- -D warnings
      
      - name: Run tests
        env:
          DATABASE_URL: ${{ env.TEST_DATABASE_URL || env.DATABASE_URL }}
          RUST_BACKTRACE: 1  # Get full backtraces on test failures
          SQLX_OFFLINE: "false"
        run: |
          # Run migrations on the test database
          echo "Running migrations..."
          sqlx migrate run --database-url ${{ env.TEST_DATABASE_URL || env.DATABASE_URL }}
          
          # Run tests with retries for flaky tests
          for i in {1..3}; do
            echo "Running tests (attempt $i)"
            if cargo test -- --test-threads=1; then
              echo "Tests passed on attempt $i"
              exit 0
            fi
            echo "Test attempt $i failed, retrying..."
            sleep 2
          done
          echo "All test attempts failed"
          exit 1
          
      - name: Check SQLx offline mode
        run: |
          # This will fail if any queries aren't compatible with offline mode
          SQLX_OFFLINE=true cargo check
          
      - name: Clean up
        if: always()
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}
        run: |
          # Clean up the test database
          psql -h localhost -U $POSTGRES_USER -c "DROP DATABASE IF EXISTS $POSTGRES_DB;"
